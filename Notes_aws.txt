https://www.youtube.com/watch?v=ZHMHQmCLakA&t=209s

download dynamodb-local container
download aws-cli container

To connect to the local dynamodb, no need for real aws credentials. Just use made up fake strings.

Sign up to aws
Create an IAM user and give it Administrator profile, don't do anything with Root user.
You can run any aws-cli command with:
	docker run --rm -v "$HOME/.aws:/root/.aws:rw" amazon/aws-cli <command>
	example: docker run --rm -v "$HOME/.aws:/root/.aws:rw" amazon/aws-cli configure list

configure aws-cli with credentials
	https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-files.html
	The AWS CLI stores sensitive credential information that you specify with aws configure in a local file named credentials, in a folder named .aws in your home directory. The less sensitive configuration options that you specify with aws configure are stored in a local file named config, also stored in the .aws folder in your home directory.
aws configure (for displaying config)
aws configure list
aws configure get
aws configure set region eu-west-2 --profile <xxx>
aws configure set aws_access_key_id XXXX
aws configure set aws_secret_access_key XXXX
aws configure set output json

to remove a setting, use an empty string as the value, or manually delete the setting in your config and credentials files in a text editor.
$ aws configure set cli_pager "" --profile xxxx

--This didn't work
aws configure import --csv credentials.csv
docker run --rm -v "$HOME/.aws:/root/.aws:rw" amazon/aws-cli configure  import --csv AdministratorMG_accessKeys.csv
This will work when the csv file is copied to $HOME/.aws on the host machine.
Import CSV credentials generated from the AWS web console. A CSV file is imported with the profile name matching the IAM user name. The CSV file must contain the following headers.
User Name
Access key ID
Secret access key


Shorten aws command

1.Create the file /usr/local/bin/aws with the following content:

#!/bin/zsh
docker run \
  --rm \
  -tiv "$HOME/.aws:/root/.aws:rw" \
  amazon/aws-cli $@

2. Make the file executable: chmod +x /usr/local/bin/aws




--Dynamodb--

docker run --name dynamodb -p 8000:8000 -d amazon/dynamodb-local 

other optional parameters
-jar DynamoDBLocal.jar
-dbPath /home/dynamodblocal/data/

docker run -p 8000:8000 -d amazon/dynamodb-local -jar DynamoDBLocal.jar -sharedDb -dbPath .

We need to use -sharedDb to be able to view the tables from NoSQL Workbench

Find your local ip address as localhost won't work since docker aws tries to connect to docker dynamodb:
ipconfig getifaddr en0
192.168.5.166

aws dynamodb list-tables --endpoint-url http://<ipaddress>:8000
aws dynamodb list-tables --endpoint-url http://192.168.5.166:8000


aws dynamodb create-table \
	--table-name WeatherForecast \
	--attribute-definitions \
		AttributeName=City,AttributeType=S \
		AttributeName=Date,AttributeType=S \
	--key-schema AttributeName=City,KeyType=HASH AttributeName=Date,KeyType=RANGE \
	--provisioned-throughput ReadCapacityUnits=1,WriteCapacityUnits=1 \
	--endpoint-url http://192.168.5.166:8000

	(optional)--region eu-west-1 (a separate db will be created for each region and profile)


DynamoDB is schemaless (except the key schema)
Don't include any non-key attribute definitions in AttributeDefinitions.
AttributeName=AlsoKnownAsCsv,AttributeType=S \

aws dynamodb create-table \
	--table-name ArtWork \
	--attribute-definitions \
		AttributeName=ArtistName,AttributeType=S \
		AttributeName=Title,AttributeType=S \
		AttributeName=Rating,AttributeType=N \
		AttributeName=EntryDateOffsetSince2000,AttributeType=N \
	--key-schema AttributeName=ArtistName,KeyType=HASH AttributeName=Title,KeyType=RANGE \
	--provisioned-throughput ReadCapacityUnits=1,WriteCapacityUnits=1 \
	--endpoint-url http://192.168.5.166:8000 \
	--global-secondary-indexes \
        "[
            {
                \"IndexName\": \"TitleIndex\",
                \"KeySchema\": [
					{\"AttributeName\":\"Title\",\"KeyType\":\"HASH\"},
					{\"AttributeName\":\"ArtistName\",\"KeyType\":\"RANGE\"}
				],
                \"Projection\":{
                    \"ProjectionType\":\"ALL\"
                },
                \"ProvisionedThroughput\": {
                    \"ReadCapacityUnits\": 10,
                    \"WriteCapacityUnits\": 5
                }
            },
	    	{
                \"IndexName\": \"RatingIndex\",
                \"KeySchema\": [
					{\"AttributeName\":\"Rating\",\"KeyType\":\"HASH\"},
					{\"AttributeName\":\"Title\",\"KeyType\":\"RANGE\"}
				],
                \"Projection\":{
                    \"ProjectionType\":\"ALL\"
                },
                \"ProvisionedThroughput\": {
                    \"ReadCapacityUnits\": 10,
                    \"WriteCapacityUnits\": 5
                }
            },
	    	{
                \"IndexName\": \"EntryDateOffsetIndex\",
                \"KeySchema\": [
					{\"AttributeName\":\"EntryDateOffsetSince2000\",\"KeyType\":\"HASH\"},
					{\"AttributeName\":\"Title\",\"KeyType\":\"RANGE\"}
				],
                \"Projection\":{
                    \"ProjectionType\":\"ALL\"
                },
                \"ProvisionedThroughput\": {
                    \"ReadCapacityUnits\": 10,
                    \"WriteCapacityUnits\": 5
                }
            }
        ]"

PK: 1
SK: Artist#1
Name
AKA

PK: 1
SK: Url#url123
Title
Rating
--Url

GSK: UrlIndex
PK: url123
SK: 1 (ArtistId) optional

GSK: TitleIndex
PK: Title
SK: 1 (ArtistId) optional

GSK: RatingIndex
PK: 1
SK: 1 (ArtistId) optional

aws dynamodb list-tables --endpoint-url http://192.168.5.166:8000

aws dynamodb create-table \
	--table-name ArtWork \
	--attribute-definitions \
		AttributeName=ArtistId,AttributeType=N \
		AttributeName=SK,AttributeType=S \
		AttributeName=Title,AttributeType=S \
		AttributeName=Uri,AttributeType=S \
		AttributeName=Rating,AttributeType=N \
		AttributeName=EntryDateOffsetSince2000,AttributeType=N \
	--key-schema AttributeName=ArtistId,KeyType=HASH AttributeName=SK,KeyType=RANGE \
	--provisioned-throughput ReadCapacityUnits=1,WriteCapacityUnits=1 \
	--endpoint-url http://192.168.5.166:8000 \
	--global-secondary-indexes \
        "[
            {
                \"IndexName\": \"UriIndex\",
                \"KeySchema\": [
					{\"AttributeName\":\"Uri\",\"KeyType\":\"HASH\"},
					{\"AttributeName\":\"ArtistId\",\"KeyType\":\"RANGE\"}
				],
                \"Projection\":{
                    \"ProjectionType\":\"ALL\"
                },
                \"ProvisionedThroughput\": {
                    \"ReadCapacityUnits\": 10,
                    \"WriteCapacityUnits\": 5
                }
            },
	    	{
                \"IndexName\": \"TitleIndex\",
                \"KeySchema\": [
					{\"AttributeName\":\"Title\",\"KeyType\":\"HASH\"}
				],
                \"Projection\":{
                    \"ProjectionType\":\"ALL\"
                },
                \"ProvisionedThroughput\": {
                    \"ReadCapacityUnits\": 10,
                    \"WriteCapacityUnits\": 5
                }
            },
	    	{
                \"IndexName\": \"RatingIndex\",
                \"KeySchema\": [
					{\"AttributeName\":\"Rating\",\"KeyType\":\"HASH\"}
				],
                \"Projection\":{
                    \"ProjectionType\":\"ALL\"
                },
                \"ProvisionedThroughput\": {
                    \"ReadCapacityUnits\": 10,
                    \"WriteCapacityUnits\": 5
                }
            },
	    	{
                \"IndexName\": \"EntryDateOffsetIndex\",
                \"KeySchema\": [
					{\"AttributeName\":\"EntryDateOffsetSince2000\",\"KeyType\":\"HASH\"}
				],
                \"Projection\":{
                    \"ProjectionType\":\"ALL\"
                },
                \"ProvisionedThroughput\": {
                    \"ReadCapacityUnits\": 10,
                    \"WriteCapacityUnits\": 5
                }
            }
        ]"

aws dynamodb delete-table \
	--table-name ArtWork \
	--endpoint-url http://192.168.5.166:8000

aws dynamodb update-table \
    --table-name Music \
    --attribute-definitions AttributeName=AlbumTitle,AttributeType=S \
    --global-secondary-index-updates \
        "[{\"Create\":{\"IndexName\": \"AlbumTitle-index\",\"KeySchema\":[{\"AttributeName\":\"AlbumTitle\",\"KeyType\":\"HASH\"}], \
        \"ProvisionedThroughput\": {\"ReadCapacityUnits\": 10, \"WriteCapacityUnits\": 5      },\"Projection\":{\"ProjectionType\":\"ALL\"}}}]"


https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Query.html

aws dynamodb query \
    --table-name ArtWork \
	--endpoint-url http://192.168.5.166:8000 \
    --key-condition-expression "ArtistName = :name" \
    --expression-attribute-values  '{":name":{"S":"Murat Guney"}}'

aws dynamodb scan \
    --table-name ArtWork \
	--endpoint-url http://192.168.5.166:8000 

aws dynamodb query \
    --table-name Music \
    --index-name AlbumTitle-index \
    --key-condition-expression "AlbumTitle = :name" \
    --expression-attribute-values  '{":name":{"S":"Somewhat Famous"}}'

DynamoDB only allow begin_with() for key conditions. So contains() is not supported.
KeyConditionExpression: CustomerId = '42' AND Name BEGINS_WITH 'juice'


Environment variables:
AWS_PROFILE

$ export AWS_ACCESS_KEY_ID=AKIAIOSFODNN7EXAMPLE
$ export AWS_SECRET_ACCESS_KEY=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
$ export AWS_DEFAULT_REGION=us-west-2